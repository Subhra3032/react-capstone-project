const express = require('express');
const Stripe = require('stripe');
const cors = require('cors');
const multer = require('multer');
const bodyParser = require('body-parser');

const app = express();
const stripe = Stripe("sk_test_51NPgG9SIMqwS7WNZ0MoKTZMtXumWBS2DjM3o8yM6OmodEB4SO2eL8wWTqZ5uwImgAOgNSwTJ2GImEn24eUtpoYD1009Eoxzoa7");

app.use(cors());
app.use(bodyParser.json());

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/'); // Directory where files will be saved
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

const upload = multer({ storage });

let bills = []; // Temporary in-memory storage for bills, can be replaced with database in production

// POST endpoint to add a bill
app.post('/bill/add-bills', upload.single('attachment'), (req, res) => {
    try {
        const { billName, category, billDate, dueDate, amount, reminderFrequency, notes, isRecurring } = req.body;
        const attachment = req.file ? req.file.path : null; // Handle file path

        // Basic validation to ensure required fields are provided
        if (!billName || !category || !billDate || !dueDate || !amount || !reminderFrequency) {
            return res.status(400).json({ message: 'Please provide all required fields.' });
        }

        // Create a new bill object
        const newBill = {
            id: bills.length + 1, // Assign a unique ID, this should be auto-generated by a database
            billName,
            category,
            billDate,
            dueDate,
            amount,
            reminderFrequency,
            notes,
            isRecurring,
            attachment,
        };

        // Add the new bill to the bills array (in-memory)
        bills.push(newBill);

        // Respond with the new bill details
        res.status(201).json(newBill);
    } catch (error) {
        console.error('Error adding bill:', error);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});



app.post('/bill/create-checkout-session', async (req, res) => {
    try {
        const { bills } = req.body;

        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: bills.map(bill => ({
                price_data: {
                    currency: 'usd',
                    product_data: {
                        name: `Payment for ${bill.category}`,
                    },
                    unit_amount: parseInt(bill.amountDue.replace('$', '').replace(',', '')) * 100, // Convert to cents
                },
                quantity: 1,
            })),
            mode: 'payment',
            success_url: 'http://localhost:3000/bill/success', 
            cancel_url: 'http://localhost:3000/bill/cancel',   
        });

        res.json({ sessionId: session.id });
    } catch (error) {
        console.error('Error creating Checkout Session:', error);
        res.status(500).send('Internal Server Error');
    }
});

app.listen(8085, () => {
    console.log('Server running on port 8085');  
});